{"ast":null,"code":"var _jsxFileName = \"C:\\\\Python\\\\VoiceToText\\\\my-react-app\\\\src\\\\components\\\\TranscribeYouTube.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { getTranscript } from '../api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TranscribeYouTube = () => {\n  _s();\n  const [url, setUrl] = useState('');\n  const [transcript, setTranscript] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const handleSubmit = async e => {\n    e.preventDefault();\n    setLoading(true);\n    setError(null);\n    setTranscript(null);\n    try {\n      const result = await getTranscript(url);\n      setTranscript(result.transcript || JSON.stringify(result));\n    } catch (err) {\n      setError(err.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"YouTube Video Transcription\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: url,\n        onChange: e => setUrl(e.target.value),\n        placeholder: \"Enter YouTube URL\",\n        style: {\n          width: '300px'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        disabled: loading,\n        children: \"Transcribe\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this), loading && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"spinner\",\n      children: \"Transcribing...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 19\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: 'red'\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 17\n    }, this), transcript && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Transcript:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n        style: {\n          whiteSpace: 'pre-wrap'\n        },\n        children: transcript\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, this);\n};\n_s(TranscribeYouTube, \"l7DhiUDNJjf+0m2/N3uWaAEXAx0=\");\n_c = TranscribeYouTube;\nexport default TranscribeYouTube;\nvar _c;\n$RefreshReg$(_c, \"TranscribeYouTube\");","map":{"version":3,"names":["React","useState","getTranscript","jsxDEV","_jsxDEV","TranscribeYouTube","_s","url","setUrl","transcript","setTranscript","loading","setLoading","error","setError","handleSubmit","e","preventDefault","result","JSON","stringify","err","message","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","value","onChange","target","placeholder","style","width","disabled","className","color","whiteSpace","_c","$RefreshReg$"],"sources":["C:/Python/VoiceToText/my-react-app/src/components/TranscribeYouTube.tsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { getTranscript } from '../api';\r\n\r\nconst TranscribeYouTube: React.FC = () => {\r\n  const [url, setUrl] = useState('');\r\n  const [transcript, setTranscript] = useState<string | null>(null);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  const handleSubmit = async (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    setLoading(true);\r\n    setError(null);\r\n    setTranscript(null);\r\n    try {\r\n      const result = await getTranscript(url);\r\n      setTranscript(result.transcript || JSON.stringify(result));\r\n    } catch (err: any) {\r\n      setError(err.message);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>YouTube Video Transcription</h2>\r\n      <form onSubmit={handleSubmit}>\r\n        <input\r\n          type=\"text\"\r\n          value={url}\r\n          onChange={e => setUrl(e.target.value)}\r\n          placeholder=\"Enter YouTube URL\"\r\n          style={{ width: '300px' }}\r\n        />\r\n        <button type=\"submit\" disabled={loading}>Transcribe</button>\r\n      </form>\r\n      {loading && <div className=\"spinner\">Transcribing...</div>}\r\n      {error && <p style={{ color: 'red' }}>{error}</p>}\r\n      {transcript && (\r\n        <div>\r\n          <h3>Transcript:</h3>\r\n          <pre style={{ whiteSpace: 'pre-wrap' }}>{transcript}</pre>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TranscribeYouTube;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}